<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>追光者</title>
  
  <subtitle>小兴的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xdksx.github.io/"/>
  <updated>2022-03-13T07:19:52.844Z</updated>
  <id>https://xdksx.github.io/</id>
  
  <author>
    <name>小兴</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>quic</title>
    <link href="https://xdksx.github.io/2022/03/12/quic/"/>
    <id>https://xdksx.github.io/2022/03/12/quic/</id>
    <published>2022-03-12T15:02:48.000Z</published>
    <updated>2022-03-13T07:19:52.844Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Internet Engineering Task Force (IETF)                   J. Iyengar, Ed.&lt;br&gt;Request for Comments: 9000                                  
        
      
    
    </summary>
    
      <category term="protocol" scheme="https://xdksx.github.io/categories/protocol/"/>
    
    
      <category term="live" scheme="https://xdksx.github.io/tags/live/"/>
    
  </entry>
  
  <entry>
    <title>c++_keyword</title>
    <link href="https://xdksx.github.io/2021/05/22/c-keyword/"/>
    <id>https://xdksx.github.io/2021/05/22/c-keyword/</id>
    <published>2021-05-22T18:21:43.000Z</published>
    <updated>2021-05-23T09:36:11.349Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-中的关键字和基本解释&quot;&gt;&lt;a href=&quot;#c-中的关键字和基本解释&quot; class=&quot;headerlink&quot; title=&quot;c++中的关键字和基本解释&quot;&gt;&lt;/a&gt;c++中的关键字和基本解释&lt;/h3&gt;&lt;h5 id=&quot;alignas&quot;&gt;&lt;a href=&quot;#alignas&quot; class=&quot;headerlink&quot; title=&quot;alignas:&quot;&gt;&lt;/a&gt;alignas:
    
    </summary>
    
      <category term="c++" scheme="https://xdksx.github.io/categories/c/"/>
    
    
      <category term="c++keyword" scheme="https://xdksx.github.io/tags/c-keyword/"/>
    
  </entry>
  
  <entry>
    <title>c++_valuetype</title>
    <link href="https://xdksx.github.io/2021/05/22/c-valuetype/"/>
    <id>https://xdksx.github.io/2021/05/22/c-valuetype/</id>
    <published>2021-05-22T17:35:24.000Z</published>
    <updated>2021-05-23T08:36:06.849Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;彻底理解c-中的五种值，临时对象，移动语意，引用指针，const等的概念和关联&quot;&gt;&lt;a href=&quot;#彻底理解c-中的五种值，临时对象，移动语意，引用指针，const等的概念和关联&quot; class=&quot;headerlink&quot; title=&quot;彻底理解c++中的五种值，临时对象，移动语意，引用指针，const等的概念和关联&quot;&gt;&lt;/a&gt;彻底理解c++中的五种值，临时对象，移动语意，引用指针，const等的概念和关联&lt;/h3&gt;&lt;h4 id=&quot;c-的引用和指针&quot;&gt;&lt;a href=&quot;#c-的引用和指针&quot; class=&quot;headerlink&quot; title=&quot;c++的引用和指针&quot;&gt;&lt;/a&gt;c++的引用和指针&lt;/h4&gt;&lt;h5 id=&quot;引用：&quot;&gt;&lt;a href=&quot;#引用：&quot; class=&quot;headerlink&quot; title=&quot;引用：&quot;&gt;&lt;/a&gt;引用：&lt;/h5&gt;&lt;p&gt;引用，是变量或对象的别名，这么解释其实还是有点抽象的；&lt;br&gt;如果是指针，则好理解，是对象的虚拟内存地址；所以在赋值拷贝等容易有实体理解；而引用，在这些常见下，又是什么样的实际操作？&lt;br&gt;考虑如下例子：
    
    </summary>
    
      <category term="c++" scheme="https://xdksx.github.io/categories/c/"/>
    
    
      <category term="c++_valuetype" scheme="https://xdksx.github.io/tags/c-valuetype/"/>
    
  </entry>
  
  <entry>
    <title>tcpip_tc</title>
    <link href="https://xdksx.github.io/2021/05/22/tcpip-tc/"/>
    <id>https://xdksx.github.io/2021/05/22/tcpip-tc/</id>
    <published>2021-05-22T11:35:21.000Z</published>
    <updated>2021-05-23T02:38:45.644Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;流量控制概述&quot;&gt;&lt;a href=&quot;#流量控制概述&quot; class=&quot;headerlink&quot; title=&quot;流量控制概述&quot;&gt;&lt;/a&gt;流量控制概述&lt;/h3&gt;&lt;p&gt;linux下通过tc traffic control 框架及系列实现和工具来实现对出口，甚至入口流量的控制，所谓的控制，就是进行包延迟传输，&lt;br&gt;丢包，包损坏，带宽限制，针对某个ip规则进行限制等等，来达到模拟网络异常状况，包优先级传输，或者更多功能；
    
    </summary>
    
      <category term="tcpip" scheme="https://xdksx.github.io/categories/tcpip/"/>
    
    
      <category term="tcpip_tc" scheme="https://xdksx.github.io/tags/tcpip-tc/"/>
    
  </entry>
  
  <entry>
    <title>linux_netdevicelayer</title>
    <link href="https://xdksx.github.io/2021/05/22/linux-netdevicelayer/"/>
    <id>https://xdksx.github.io/2021/05/22/linux-netdevicelayer/</id>
    <published>2021-05-22T10:59:09.000Z</published>
    <updated>2021-05-23T02:30:56.288Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目标：&quot;&gt;&lt;a href=&quot;#目标：&quot; class=&quot;headerlink&quot; title=&quot;目标：&quot;&gt;&lt;/a&gt;目标：&lt;/h3&gt;&lt;h4 id=&quot;描述linux网络协议栈结构：&quot;&gt;&lt;a href=&quot;#描述linux网络协议栈结构：&quot; class=&quot;headerlink&quot; title=&quot;描述linux网络协议栈结构：&quot;&gt;&lt;/a&gt;描述linux网络协议栈结构：&lt;/h4&gt;&lt;p&gt;1) 常规的方式：传统的单机网络结构：&lt;br&gt;   一个服务器(server)上，运行一个linux系统，linux系统之上运行一个协议栈，支持相关上层应用；&lt;br&gt;   服务器的下方(硬件设备)，接一个或多个网卡，代表这个系统可能支持多个ip，多个出口等；每个网卡NIC接不同的交换机(路由器),来连接到可能不同的&lt;br&gt;   运营商物理网络，如下图：在这种情况下一个服务器为一个单点的物理机；
    
    </summary>
    
      <category term="tcpip" scheme="https://xdksx.github.io/categories/tcpip/"/>
    
    
      <category term="tcpip_device" scheme="https://xdksx.github.io/tags/tcpip-device/"/>
    
  </entry>
  
  <entry>
    <title>linux_neighbor</title>
    <link href="https://xdksx.github.io/2021/05/22/linux-neighbor/"/>
    <id>https://xdksx.github.io/2021/05/22/linux-neighbor/</id>
    <published>2021-05-22T10:42:26.000Z</published>
    <updated>2021-05-23T01:49:23.940Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;linux下邻居子系统的实现：&quot;&gt;&lt;a href=&quot;#linux下邻居子系统的实现：&quot; class=&quot;headerlink&quot; title=&quot;linux下邻居子系统的实现：&quot;&gt;&lt;/a&gt;linux下邻居子系统的实现：&lt;/h4&gt;&lt;h5 id=&quot;什么是邻居子系统：&quot;&gt;&lt;a href=&quot;#什么是邻居子系统：&quot; class=&quot;headerlink&quot; title=&quot;什么是邻居子系统：&quot;&gt;&lt;/a&gt;什么是邻居子系统：&lt;/h5&gt;&lt;p&gt;在linux下，是一个用来管理网络中，二层的数据正确发送的系统，维护着二层地址相关结构，以及和三层地址映射等结构，&lt;br&gt;并提供更新，查询等缓存和接口；形成一个系统；供在发送数据时查询并正确发送到指定的机器上；&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://xdksx.github.io/categories/linux/"/>
    
    
      <category term="neighbor" scheme="https://xdksx.github.io/tags/neighbor/"/>
    
  </entry>
  
  <entry>
    <title>interrupt</title>
    <link href="https://xdksx.github.io/2021/04/17/interrupt/"/>
    <id>https://xdksx.github.io/2021/04/17/interrupt/</id>
    <published>2021-04-17T16:42:52.000Z</published>
    <updated>2021-04-18T07:43:55.445Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;中断概述&quot;&gt;&lt;a href=&quot;#中断概述&quot; class=&quot;headerlink&quot; title=&quot;中断概述&quot;&gt;&lt;/a&gt;中断概述&lt;/h3&gt;&lt;p&gt;除了系统调用外，中断也是一种内核活动；系统调用不是在用户态和系统状态之间切换的唯一途径&lt;br&gt;中断的处理往往会涉及到汇编等和硬件相关的代码，但是中断处理部分随着时间的演化，已经达到了这样一种状态：高层代码和底层的硬件交互代码，已经尽可能有效而干净&lt;br&gt;地分隔开了。
    
    </summary>
    
      <category term="linux" scheme="https://xdksx.github.io/categories/linux/"/>
    
    
      <category term="interrupt" scheme="https://xdksx.github.io/tags/interrupt/"/>
    
  </entry>
  
  <entry>
    <title>systemcall</title>
    <link href="https://xdksx.github.io/2021/04/17/systemcall/"/>
    <id>https://xdksx.github.io/2021/04/17/systemcall/</id>
    <published>2021-04-17T16:41:27.000Z</published>
    <updated>2021-04-18T07:42:29.746Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;系统调用概述&quot;&gt;&lt;a href=&quot;#系统调用概述&quot; class=&quot;headerlink&quot; title=&quot;系统调用概述&quot;&gt;&lt;/a&gt;系统调用概述&lt;/h3&gt;&lt;p&gt;内核对于用户进程来讲，是一个具备多功能的黑盒子，不仅管理设备，管理内存，管理进程等，还封装了提供进程调用的各种接口，比如打开文件，写入和读取文件等等，这些接口
    
    </summary>
    
      <category term="linux" scheme="https://xdksx.github.io/categories/linux/"/>
    
    
      <category term="systemcall" scheme="https://xdksx.github.io/tags/systemcall/"/>
    
  </entry>
  
  <entry>
    <title>makefile_use</title>
    <link href="https://xdksx.github.io/2021/04/03/makefile-use/"/>
    <id>https://xdksx.github.io/2021/04/03/makefile-use/</id>
    <published>2021-04-03T22:59:53.000Z</published>
    <updated>2021-04-04T14:24:27.298Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;以下文档参考：&lt;br&gt;&lt;a href=&quot;https://www.gnu.org/software/make/manual/make.html#toc-Overview-of-make&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.gnu.org/software/make/manual/make.html#toc-Overview-of-make&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://seisman.github.io/how-to-write-makefile/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://seisman.github.io/how-to-write-makefile/introduction.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个文件记录了GNU make实用程序，它自动地确定一个大型程序的哪些部分需要重新编译，并发出重新编译它们的命令&lt;br&gt;适用版本：&lt;br&gt;This is Edition 0.75, last updated 17 January 2020, of The GNU Make Manual, for GNU make version 4.3.&lt;/p&gt;
&lt;h3 id=&quot;make的基本功能和使用简介：&quot;&gt;&lt;a href=&quot;#make的基本功能和使用简介：&quot; class=&quot;headerlink&quot; title=&quot;make的基本功能和使用简介：&quot;&gt;&lt;/a&gt;make的基本功能和使用简介：
    
    </summary>
    
      <category term="linux" scheme="https://xdksx.github.io/categories/linux/"/>
    
    
      <category term="makefile" scheme="https://xdksx.github.io/tags/makefile/"/>
    
  </entry>
  
  <entry>
    <title>cpp_type</title>
    <link href="https://xdksx.github.io/2021/04/03/cpp-type/"/>
    <id>https://xdksx.github.io/2021/04/03/cpp-type/</id>
    <published>2021-04-03T18:32:54.000Z</published>
    <updated>2021-04-04T14:10:16.423Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;c++数据类型：&lt;/p&gt;
&lt;h3 id=&quot;数据类型概览&quot;&gt;&lt;a href=&quot;#数据类型概览&quot; class=&quot;headerlink&quot; title=&quot;数据类型概览&quot;&gt;&lt;/a&gt;数据类型概览&lt;/h3&gt;&lt;p&gt;1) 类型无处不在，注意表达式也有类型，一些语句本身也是某个类型的值，以下这些都有类型属性&lt;br&gt;    对象的类型和基本类型&lt;br&gt;    引用的类型&lt;br&gt;    函数的类型(返回值类型)&lt;br&gt;    函数模板特化&lt;br&gt;    表达式的值类型
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_type" scheme="https://xdksx.github.io/tags/cpp-type/"/>
    
  </entry>
  
  <entry>
    <title>tcpip_init</title>
    <link href="https://xdksx.github.io/2021/03/20/tcpip-init/"/>
    <id>https://xdksx.github.io/2021/03/20/tcpip-init/</id>
    <published>2021-03-20T23:11:45.000Z</published>
    <updated>2021-03-21T14:25:36.021Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;linux内核网络子系统的初始化介绍&quot;&gt;&lt;a href=&quot;#linux内核网络子系统的初始化介绍&quot; class=&quot;headerlink&quot; title=&quot;linux内核网络子系统的初始化介绍&quot;&gt;&lt;/a&gt;linux内核网络子系统的初始化介绍&lt;/h3&gt;&lt;p&gt;基于linux4.8,版本其实现在已经是5.12了，但是因为我装的linux源码版本是4.8，为方便调试，都在这个版本分析，差别不会很大；&lt;br&gt;以下的内核都指的这个linux4.8的内核；环境都在这个上的；
    
    </summary>
    
      <category term="tcpip" scheme="https://xdksx.github.io/categories/tcpip/"/>
    
    
      <category term="tcpip_init" scheme="https://xdksx.github.io/tags/tcpip-init/"/>
    
  </entry>
  
  <entry>
    <title>filesystem</title>
    <link href="https://xdksx.github.io/2021/03/12/filesystem/"/>
    <id>https://xdksx.github.io/2021/03/12/filesystem/</id>
    <published>2021-03-12T23:31:21.000Z</published>
    <updated>2021-03-13T15:31:52.345Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件系统：&quot;&gt;&lt;a href=&quot;#文件系统：&quot; class=&quot;headerlink&quot; title=&quot;文件系统：&quot;&gt;&lt;/a&gt;文件系统：&lt;/h2&gt;&lt;h3 id=&quot;关于信息记载和存储的历史，现状和未来展望&quot;&gt;&lt;a href=&quot;#关于信息记载和存储的历史，现状和未来展望&quot; class=&quot;headerlink&quot; title=&quot;关于信息记载和存储的历史，现状和未来展望&quot;&gt;&lt;/a&gt;关于信息记载和存储的历史，现状和未来展望&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;本能信息存储：在原始时期，信息被基因记载，并向下传递，个体发生基因突变后，存活下来的个体，能将突变的基因信息保存下来，传递下来，从而进化；&lt;/li&gt;
&lt;li&gt;口口相传：人类发明语言或者是类似的东西，然后将经验和信息一代代传递下来，通过人本身作为记录和存储；&lt;/li&gt;
&lt;li&gt;文字的出现：直到文字和记载载体出现，比如帛书，纸等，文字以语句，文章，数字等被记录成竹简或书本，保存下来；&lt;/li&gt;
&lt;li&gt;磁带记录：磁带的出现，提高了信息记载的便利性；
    
    </summary>
    
      <category term="linux" scheme="https://xdksx.github.io/categories/linux/"/>
    
    
      <category term="filesystem" scheme="https://xdksx.github.io/tags/filesystem/"/>
    
  </entry>
  
  <entry>
    <title>memory_overiew</title>
    <link href="https://xdksx.github.io/2021/03/06/memory-overiew/"/>
    <id>https://xdksx.github.io/2021/03/06/memory-overiew/</id>
    <published>2021-03-06T20:35:25.000Z</published>
    <updated>2021-03-13T15:30:08.328Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;linux内存系统概述&quot;&gt;&lt;a href=&quot;#linux内存系统概述&quot; class=&quot;headerlink&quot; title=&quot;linux内存系统概述&quot;&gt;&lt;/a&gt;linux内存系统概述&lt;/h3&gt;&lt;p&gt;linux的内存系统是一个很复杂的系统，需要从几个角度去分析，里面包含多种机制，比如虚拟地址和物理地址的转换等等；本文是一个系统性的大局观来从几个方面分析内存系统的记录：
    
    </summary>
    
      <category term="linux" scheme="https://xdksx.github.io/categories/linux/"/>
    
    
      <category term="memory" scheme="https://xdksx.github.io/tags/memory/"/>
    
  </entry>
  
  <entry>
    <title>procsysfs</title>
    <link href="https://xdksx.github.io/2021/02/26/procsysfs/"/>
    <id>https://xdksx.github.io/2021/02/26/procsysfs/</id>
    <published>2021-02-26T15:52:48.000Z</published>
    <updated>2021-02-27T08:05:58.715Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;linux-用户空间与内核的接口—内核信息的输出和修改&quot;&gt;&lt;a href=&quot;#linux-用户空间与内核的接口—内核信息的输出和修改&quot; class=&quot;headerlink&quot; title=&quot;linux 用户空间与内核的接口—内核信息的输出和修改&quot;&gt;&lt;/a&gt;linux 用户空间与内核的接口—内核信息的输出和修改&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;linux用户与内核的接口有多种,配置内核的netlink,ioctl,等特殊系统调用，其他系统调用;用户空间指令:ifconfig,route,&lt;br&gt;iptable等;以及内核输出信息的procfs,sysfs和修改内核参数的sysctl接口;这里介绍最后一种;
    
    </summary>
    
      <category term="linux" scheme="https://xdksx.github.io/categories/linux/"/>
    
    
      <category term="linux_procsysfs" scheme="https://xdksx.github.io/tags/linux-procsysfs/"/>
    
  </entry>
  
  <entry>
    <title>sk_buff</title>
    <link href="https://xdksx.github.io/2021/02/20/sk-buff/"/>
    <id>https://xdksx.github.io/2021/02/20/sk-buff/</id>
    <published>2021-02-20T17:33:29.000Z</published>
    <updated>2021-02-21T09:37:35.359Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于skb&quot;&gt;&lt;a href=&quot;#关于skb&quot; class=&quot;headerlink&quot; title=&quot;关于skb&quot;&gt;&lt;/a&gt;关于skb&lt;/h3&gt;&lt;p&gt;skb是网络协议栈中对包的底层操作结构，它需要满足以下特性：&lt;br&gt;1) 能方便的处理可变长缓存，因为发送和接收的数据长时不固定的&lt;br&gt;2）能容易实现头尾部增加和移除数据，因为这些缓存区需要在不同网络层次间进行传递&lt;br&gt;3）添加和移除数据能尽量避免数据的复制
    
    </summary>
    
      <category term="tcpip" scheme="https://xdksx.github.io/categories/tcpip/"/>
    
    
      <category term="tcpip_code" scheme="https://xdksx.github.io/tags/tcpip-code/"/>
    
  </entry>
  
  <entry>
    <title>cprogram_generate</title>
    <link href="https://xdksx.github.io/2021/02/20/cprogram-generate/"/>
    <id>https://xdksx.github.io/2021/02/20/cprogram-generate/</id>
    <published>2021-02-20T17:27:32.000Z</published>
    <updated>2021-04-24T14:25:46.255Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于编译链接执行，编译器和cpu相关&quot;&gt;&lt;a href=&quot;#关于编译链接执行，编译器和cpu相关&quot; class=&quot;headerlink&quot; title=&quot;关于编译链接执行，编译器和cpu相关&quot;&gt;&lt;/a&gt;关于编译链接执行，编译器和cpu相关&lt;/h3&gt;&lt;p&gt;目标： 学完这个部分的知识和调试方法后，一方面可以在写程序时，减少编译错误等，在遇到编译和运行时错误，可以更快的解决或者知道怎么解决，用什么工具可以&lt;br&gt;更快的解决，另一方面，在处理cpu高载，dump问题时，能知道怎么处理和更好的处理；
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="compilelink" scheme="https://xdksx.github.io/tags/compilelink/"/>
    
  </entry>
  
  <entry>
    <title>live_media_audioformat</title>
    <link href="https://xdksx.github.io/2021/02/17/live-media-audioformat/"/>
    <id>https://xdksx.github.io/2021/02/17/live-media-audioformat/</id>
    <published>2021-02-17T19:49:29.000Z</published>
    <updated>2021-02-18T11:50:26.156Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;音频编码：-aac-adts-wav-mp3-等编码的意义和基本概念&quot;&gt;&lt;a href=&quot;#音频编码：-aac-adts-wav-mp3-等编码的意义和基本概念&quot; class=&quot;headerlink&quot; title=&quot;音频编码： aac, adts, wav ,mp3 等编码的意义和基本概念&quot;&gt;&lt;/a&gt;音频编码： aac, adts, wav ,mp3 等编码的意义和基本概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;原始音频： 采集后得到的是音频的裸数据：在采集时需要指定采样率，量化位数(一般采样也会有几种协议，比如常见的PCM，里面会自带量化位数指定)，channle数，以及必要的大小端数据等
    
    </summary>
    
      <category term="audio" scheme="https://xdksx.github.io/categories/audio/"/>
    
    
      <category term="audio" scheme="https://xdksx.github.io/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>live_media_video</title>
    <link href="https://xdksx.github.io/2021/02/17/live-media-video/"/>
    <id>https://xdksx.github.io/2021/02/17/live-media-video/</id>
    <published>2021-02-17T18:44:49.000Z</published>
    <updated>2021-04-04T09:39:00.212Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;图像科技发展史：&quot;&gt;&lt;a href=&quot;#图像科技发展史：&quot; class=&quot;headerlink&quot; title=&quot;图像科技发展史：&quot;&gt;&lt;/a&gt;图像科技发展史：&lt;/h3&gt;&lt;h4 id=&quot;图像的本质：&quot;&gt;&lt;a href=&quot;#图像的本质：&quot; class=&quot;headerlink&quot; title=&quot;图像的本质：&quot;&gt;&lt;/a&gt;图像的本质：&lt;/h4&gt;&lt;p&gt;图像的本质可以说是反射光的集合，不同的物质分子组成等不同，那么光照射到物质上，有部分频率的光被吸收，剩下的反射出来，就形成不同的
    
    </summary>
    
      <category term="video" scheme="https://xdksx.github.io/categories/video/"/>
    
    
      <category term="video" scheme="https://xdksx.github.io/tags/video/"/>
    
  </entry>
  
  <entry>
    <title>live_media_audio</title>
    <link href="https://xdksx.github.io/2021/02/17/live-media-audio/"/>
    <id>https://xdksx.github.io/2021/02/17/live-media-audio/</id>
    <published>2021-02-17T18:28:34.000Z</published>
    <updated>2021-05-23T00:29:27.970Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;音频科技发展史：&quot;&gt;&lt;a href=&quot;#音频科技发展史：&quot; class=&quot;headerlink&quot; title=&quot;音频科技发展史：&quot;&gt;&lt;/a&gt;音频科技发展史：&lt;/h3&gt;&lt;h4 id=&quot;声音的本质：&quot;&gt;&lt;a href=&quot;#声音的本质：&quot; class=&quot;headerlink&quot; title=&quot;声音的本质：&quot;&gt;&lt;/a&gt;声音的本质：&lt;/h4&gt;&lt;p&gt;声音的本质是一种振动，可以说是一种一维的物理信号；可以通过敲击，让物体振动产生，并且可以使空气产生振动，从而传播，不过会能量衰减，导致只能传播一定的距离，原始振动&lt;br&gt;能量越大，传输的距离就越大；
    
    </summary>
    
      <category term="audio" scheme="https://xdksx.github.io/categories/audio/"/>
    
    
      <category term="audio" scheme="https://xdksx.github.io/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>live_media_overiew</title>
    <link href="https://xdksx.github.io/2021/02/17/live-media-overiew/"/>
    <id>https://xdksx.github.io/2021/02/17/live-media-overiew/</id>
    <published>2021-02-17T18:09:48.000Z</published>
    <updated>2021-02-18T10:26:57.876Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;音视频基础知识：理论-实践&quot;&gt;&lt;a href=&quot;#音视频基础知识：理论-实践&quot; class=&quot;headerlink&quot; title=&quot;音视频基础知识：理论+实践&quot;&gt;&lt;/a&gt;音视频基础知识：理论+实践&lt;/h3&gt;&lt;h4 id=&quot;音频的基本原理和组成&quot;&gt;&lt;a href=&quot;#音频的基本原理和组成&quot; class=&quot;headerlink&quot; title=&quot;音频的基本原理和组成&quot;&gt;&lt;/a&gt;音频的基本原理和组成&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;音频的表示和基本参数： Hz, 音量，pcm等以及基本编码；&lt;/li&gt;
&lt;li&gt;音频查看的相关工具；
    
    </summary>
    
      <category term="live_media" scheme="https://xdksx.github.io/categories/live-media/"/>
    
    
      <category term="overiew" scheme="https://xdksx.github.io/tags/overiew/"/>
    
  </entry>
  
</feed>
