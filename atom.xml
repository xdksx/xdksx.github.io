<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>追光者</title>
  
  <subtitle>小兴的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xdksx.github.io/"/>
  <updated>2021-02-18T11:50:26.156Z</updated>
  <id>https://xdksx.github.io/</id>
  
  <author>
    <name>小兴</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>live_media_audioformat</title>
    <link href="https://xdksx.github.io/2021/02/17/live-media-audioformat/"/>
    <id>https://xdksx.github.io/2021/02/17/live-media-audioformat/</id>
    <published>2021-02-17T19:49:29.000Z</published>
    <updated>2021-02-18T11:50:26.156Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;音频编码：-aac-adts-wav-mp3-等编码的意义和基本概念&quot;&gt;&lt;a href=&quot;#音频编码：-aac-adts-wav-mp3-等编码的意义和基本概念&quot; class=&quot;headerlink&quot; title=&quot;音频编码： aac, adts, wav ,mp3 等编码的意义和基本概念&quot;&gt;&lt;/a&gt;音频编码： aac, adts, wav ,mp3 等编码的意义和基本概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;原始音频： 采集后得到的是音频的裸数据：在采集时需要指定采样率，量化位数(一般采样也会有几种协议，比如常见的PCM，里面会自带量化位数指定)，channle数，以及必要的大小端数据等
    
    </summary>
    
      <category term="audio" scheme="https://xdksx.github.io/categories/audio/"/>
    
    
      <category term="audio" scheme="https://xdksx.github.io/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>live_media_video</title>
    <link href="https://xdksx.github.io/2021/02/17/live-media-video/"/>
    <id>https://xdksx.github.io/2021/02/17/live-media-video/</id>
    <published>2021-02-17T18:44:49.000Z</published>
    <updated>2021-02-18T10:48:36.600Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;图像科技发展史：&quot;&gt;&lt;a href=&quot;#图像科技发展史：&quot; class=&quot;headerlink&quot; title=&quot;图像科技发展史：&quot;&gt;&lt;/a&gt;图像科技发展史：&lt;/h3&gt;&lt;h4 id=&quot;图像的本质：&quot;&gt;&lt;a href=&quot;#图像的本质：&quot; class=&quot;headerlink&quot; title=&quot;图像的本质：&quot;&gt;&lt;/a&gt;图像的本质：&lt;/h4&gt;&lt;p&gt;图像的本质可以说是反射光的集合，不同的物质分子组成等不同，那么光照射到物质上，有部分频率的光被吸收，剩下的反射出来，就形成不同的
    
    </summary>
    
      <category term="video" scheme="https://xdksx.github.io/categories/video/"/>
    
    
      <category term="video" scheme="https://xdksx.github.io/tags/video/"/>
    
  </entry>
  
  <entry>
    <title>live_media_audio</title>
    <link href="https://xdksx.github.io/2021/02/17/live-media-audio/"/>
    <id>https://xdksx.github.io/2021/02/17/live-media-audio/</id>
    <published>2021-02-17T18:28:34.000Z</published>
    <updated>2021-02-18T10:37:27.537Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;音频科技发展史：&quot;&gt;&lt;a href=&quot;#音频科技发展史：&quot; class=&quot;headerlink&quot; title=&quot;音频科技发展史：&quot;&gt;&lt;/a&gt;音频科技发展史：&lt;/h3&gt;&lt;h4 id=&quot;声音的本质：&quot;&gt;&lt;a href=&quot;#声音的本质：&quot; class=&quot;headerlink&quot; title=&quot;声音的本质：&quot;&gt;&lt;/a&gt;声音的本质：&lt;/h4&gt;&lt;p&gt;声音的本质是一种振动，可以说是一种一维的物理信号；可以通过敲击，让物体振动产生，并且可以使空气产生振动，从而传播，不过会能量衰减，导致只能传播一定的距离，原始振动&lt;br&gt;能量越大，传输的距离就越大；
    
    </summary>
    
      <category term="audio" scheme="https://xdksx.github.io/categories/audio/"/>
    
    
      <category term="audio" scheme="https://xdksx.github.io/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>live_media_overiew</title>
    <link href="https://xdksx.github.io/2021/02/17/live-media-overiew/"/>
    <id>https://xdksx.github.io/2021/02/17/live-media-overiew/</id>
    <published>2021-02-17T18:09:48.000Z</published>
    <updated>2021-02-18T10:26:57.876Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;音视频基础知识：理论-实践&quot;&gt;&lt;a href=&quot;#音视频基础知识：理论-实践&quot; class=&quot;headerlink&quot; title=&quot;音视频基础知识：理论+实践&quot;&gt;&lt;/a&gt;音视频基础知识：理论+实践&lt;/h3&gt;&lt;h4 id=&quot;音频的基本原理和组成&quot;&gt;&lt;a href=&quot;#音频的基本原理和组成&quot; class=&quot;headerlink&quot; title=&quot;音频的基本原理和组成&quot;&gt;&lt;/a&gt;音频的基本原理和组成&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;音频的表示和基本参数： Hz, 音量，pcm等以及基本编码；&lt;/li&gt;
&lt;li&gt;音频查看的相关工具；
    
    </summary>
    
      <category term="live_media" scheme="https://xdksx.github.io/categories/live-media/"/>
    
    
      <category term="overiew" scheme="https://xdksx.github.io/tags/overiew/"/>
    
  </entry>
  
  <entry>
    <title>my_funds_and_stocks</title>
    <link href="https://xdksx.github.io/2021/02/09/my-funds-and-stocks/"/>
    <id>https://xdksx.github.io/2021/02/09/my-funds-and-stocks/</id>
    <published>2021-02-09T20:56:47.000Z</published>
    <updated>2021-02-10T13:25:33.152Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介和写这篇文章的目的：&quot;&gt;&lt;a href=&quot;#简介和写这篇文章的目的：&quot; class=&quot;headerlink&quot; title=&quot;简介和写这篇文章的目的：&quot;&gt;&lt;/a&gt;简介和写这篇文章的目的：&lt;/h3&gt;&lt;p&gt;  其实在上大学，大三大四的时候就有财商的思考了，而触发这个思考一开始是大学期间看的穷爸爸和富爸爸那本书，和那个老鼠赛跑的游戏，再之后，财商这个词，
    
    </summary>
    
      <category term="Financial_management" scheme="https://xdksx.github.io/categories/Financial-management/"/>
    
    
      <category term="Funds_and_stocks" scheme="https://xdksx.github.io/tags/Funds-and-stocks/"/>
    
  </entry>
  
  <entry>
    <title>cpp_template_class</title>
    <link href="https://xdksx.github.io/2021/01/09/cpp-template-class/"/>
    <id>https://xdksx.github.io/2021/01/09/cpp-template-class/</id>
    <published>2021-01-09T17:07:05.000Z</published>
    <updated>2021-01-10T09:09:29.814Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;类模板的基本概念&quot;&gt;&lt;a href=&quot;#类模板的基本概念&quot; class=&quot;headerlink&quot; title=&quot;类模板的基本概念&quot;&gt;&lt;/a&gt;类模板的基本概念&lt;/h3&gt;&lt;h3 id=&quot;类模板的引入：&quot;&gt;&lt;a href=&quot;#类模板的引入：&quot; class=&quot;headerlink&quot; title=&quot;类模板的引入：&quot;&gt;&lt;/a&gt;类模板的引入：
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_template" scheme="https://xdksx.github.io/tags/cpp-template/"/>
    
  </entry>
  
  <entry>
    <title>cpp_template_func</title>
    <link href="https://xdksx.github.io/2021/01/09/cpp-template-func/"/>
    <id>https://xdksx.github.io/2021/01/09/cpp-template-func/</id>
    <published>2021-01-09T16:50:01.000Z</published>
    <updated>2021-01-10T08:50:57.573Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; title=&quot;概述：&quot;&gt;&lt;/a&gt;概述：&lt;/h3&gt;&lt;p&gt;为什么需要函数模板：类型限制了函数的通用性，参数换一种类型，即得重新再定义一个处理流程相同的函数；
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_template" scheme="https://xdksx.github.io/tags/cpp-template/"/>
    
  </entry>
  
  <entry>
    <title>cpp_template_deepin</title>
    <link href="https://xdksx.github.io/2021/01/09/cpp-template-deepin/"/>
    <id>https://xdksx.github.io/2021/01/09/cpp-template-deepin/</id>
    <published>2021-01-09T16:23:38.000Z</published>
    <updated>2021-01-10T08:32:42.466Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;模板是什么，为什么要引入模板：&quot;&gt;&lt;a href=&quot;#模板是什么，为什么要引入模板：&quot; class=&quot;headerlink&quot; title=&quot;模板是什么，为什么要引入模板：&quot;&gt;&lt;/a&gt;模板是什么，为什么要引入模板：&lt;/h3&gt;&lt;p&gt;模板是用来生成代码的，通过模板可以定义一组类型的共同行为；&lt;br&gt;为什么要引入模板：&lt;br&gt;继承和组合是实现重用代码的方法，而容器也是，为了实现能承载不同类型的容器，java等其他语言用所有类都继承于根类型等方式，
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_template" scheme="https://xdksx.github.io/tags/cpp-template/"/>
    
  </entry>
  
  <entry>
    <title>gdb基础</title>
    <link href="https://xdksx.github.io/2020/07/11/gdb%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://xdksx.github.io/2020/07/11/gdb基本使用/</id>
    <published>2020-07-11T09:48:05.000Z</published>
    <updated>2020-07-11T07:45:16.137Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;1、总体&lt;br&gt;GDB可以做四种主要的事情（以及支持这些事情的其他事情）来帮助您捕获行为中的错误：&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://xdksx.github.io/categories/linux/"/>
    
    
      <category term="gdb" scheme="https://xdksx.github.io/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>我理解的心理模型</title>
    <link href="https://xdksx.github.io/2020/04/03/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84%E5%BF%83%E7%90%86%E6%A8%A1%E5%9E%8B/"/>
    <id>https://xdksx.github.io/2020/04/03/我理解的心理模型/</id>
    <published>2020-04-03T21:44:04.000Z</published>
    <updated>2020-06-07T05:08:02.035Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;以下内容均为本人构想理解提出，如有雷同纯属巧合，仅为本人粗略观点，不期赞同；&lt;/p&gt;
&lt;h3 id=&quot;一、模型概念&quot;&gt;&lt;a href=&quot;#一、模型概念&quot; class=&quot;headerlink&quot; title=&quot;一、模型概念&quot;&gt;&lt;/a&gt;一、模型概念&lt;/h3&gt;&lt;h4 id=&quot;1）模型的广义解释&quot;&gt;&lt;a href=&quot;#1）模型的广义解释&quot; class=&quot;headerlink&quot; title=&quot;1）模型的广义解释&quot;&gt;&lt;/a&gt;1）模型的广义解释&lt;/h4&gt;&lt;p&gt;模型用于抽象化一类事物的特点和规律，甚至是发展周期；模型常见有数学模型，物理模型，工业模型等等；
    
    </summary>
    
      <category term="心理" scheme="https://xdksx.github.io/categories/%E5%BF%83%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>cpp_runtime_semantis</title>
    <link href="https://xdksx.github.io/2018/07/29/cpp-runtime-semantis/"/>
    <id>https://xdksx.github.io/2018/07/29/cpp-runtime-semantis/</id>
    <published>2018-07-29T09:54:07.000Z</published>
    <updated>2020-03-21T08:20:24.432Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-执行期语意学&quot;&gt;&lt;a href=&quot;#c-执行期语意学&quot; class=&quot;headerlink&quot; title=&quot;c++ 执行期语意学&quot;&gt;&lt;/a&gt;c++ 执行期语意学&lt;/h3&gt;&lt;h4 id=&quot;执行期和编译期的理解&quot;&gt;&lt;a href=&quot;#执行期和编译期的理解&quot; class=&quot;headerlink&quot; title=&quot;执行期和编译期的理解&quot;&gt;&lt;/a&gt;执行期和编译期的理解&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;执行期：此时是对已经编译等生成的可执行文件装载到内存并调用cpu将其作为一个进程执行的过程，对c.c++来说程序的入口为main,即第一条指令是执行main函数开始的，而c++可能会加入一些额外的代码，所以实际写的第一条语句和执行的第一条语句可能有偏差；
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_class" scheme="https://xdksx.github.io/tags/cpp-class/"/>
    
  </entry>
  
  <entry>
    <title>tcpip_pingtraceroute</title>
    <link href="https://xdksx.github.io/2018/06/24/tcpip-pingtraceroute/"/>
    <id>https://xdksx.github.io/2018/06/24/tcpip-pingtraceroute/</id>
    <published>2018-06-24T14:42:49.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ping-and-traceroute&quot;&gt;&lt;a href=&quot;#ping-and-traceroute&quot; class=&quot;headerlink&quot; title=&quot;ping and traceroute&quot;&gt;&lt;/a&gt;ping and traceroute&lt;/h3&gt;&lt;h4 id=&quot;ping&quot;&gt;&lt;a href=&quot;#ping&quot; class=&quot;headerlink&quot; title=&quot;ping&quot;&gt;&lt;/a&gt;ping&lt;/h4&gt;&lt;p&gt;ping是ICMP中的回显报文类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ping 对应的icmp，type字段为0/8,code字段为0&lt;/li&gt;
&lt;li&gt;ICMP回显请求和应答报文格式：
    
    </summary>
    
      <category term="tcpip" scheme="https://xdksx.github.io/categories/tcpip/"/>
    
    
      <category term="tcpip_ip" scheme="https://xdksx.github.io/tags/tcpip-ip/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_string</title>
    <link href="https://xdksx.github.io/2018/06/24/leetcode-string/"/>
    <id>https://xdksx.github.io/2018/06/24/leetcode-string/</id>
    <published>2018-06-24T09:48:05.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;leetcode-string&quot;&gt;&lt;a href=&quot;#leetcode-string&quot; class=&quot;headerlink&quot; title=&quot;leetcode_string&quot;&gt;&lt;/a&gt;leetcode_string&lt;/h3&gt;&lt;h4 id=&quot;传统字符串匹配：&quot;&gt;&lt;a href=&quot;#传统字符串匹配：&quot; class=&quot;headerlink&quot; title=&quot;传统字符串匹配：&quot;&gt;&lt;/a&gt;传统字符串匹配：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;简单写写,变量命名等就先不纠结了&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;strStr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; s[],&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; p[])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;||p[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;p or s is null&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;s[i]!=&lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;&amp;amp;&amp;amp;s[k]!=&lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p[j]==&lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				   &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;	 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s[k]==p[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 k++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//不匹配时重新来过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 k=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p[j]==&lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;kmp匹配算法&quot;&gt;&lt;a href=&quot;#kmp匹配算法&quot; class=&quot;headerlink&quot; title=&quot;kmp匹配算法&quot;&gt;&lt;/a&gt;kmp匹配算法&lt;/h4&gt;&lt;p&gt;kmp算法：基本过程见另一篇文章数据结构之字符串
    
    </summary>
    
      <category term="leetcode" scheme="https://xdksx.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode_string" scheme="https://xdksx.github.io/tags/leetcode-string/"/>
    
  </entry>
  
  <entry>
    <title>DS_string</title>
    <link href="https://xdksx.github.io/2018/06/24/DS-string/"/>
    <id>https://xdksx.github.io/2018/06/24/DS-string/</id>
    <published>2018-06-24T08:01:32.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据结构之串&quot;&gt;&lt;a href=&quot;#数据结构之串&quot; class=&quot;headerlink&quot; title=&quot;数据结构之串&quot;&gt;&lt;/a&gt;数据结构之串&lt;/h3&gt;&lt;p&gt;欢迎来到简单而又复杂的串世界,博主许久没有去研究串，还停留在以前学习和使用串的水平，再来一波学习和归纳，发现串的基本用法其实简单，也好理解，但是衍生出来的和应用相关，而且复杂，下面道来；
    
    </summary>
    
      <category term="数据结构和算法" scheme="https://xdksx.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://xdksx.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>tcpip_routeicmp</title>
    <link href="https://xdksx.github.io/2018/06/10/tcpip-routeicmp/"/>
    <id>https://xdksx.github.io/2018/06/10/tcpip-routeicmp/</id>
    <published>2018-06-10T08:59:04.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;IP选路和ICMP协议&quot;&gt;&lt;a href=&quot;#IP选路和ICMP协议&quot; class=&quot;headerlink&quot; title=&quot;IP选路和ICMP协议&quot;&gt;&lt;/a&gt;IP选路和ICMP协议&lt;/h3&gt;&lt;h4 id=&quot;IP如何选路概述：&quot;&gt;&lt;a href=&quot;#IP如何选路概述：&quot; class=&quot;headerlink&quot; title=&quot;IP如何选路概述：&quot;&gt;&lt;/a&gt;IP如何选路概述：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ip选路实际上是一种选路机制，它搜索路由表并决定向哪个网络接口发送分组，区别于选路策略，后者是一组决定把哪些路由放入路由表的规则；ip执行选路机制，而路由守护程序则一般提供选路策略如rip,ospf&lt;/li&gt;
&lt;li&gt;点对点时，直接送到  &lt;/li&gt;
&lt;li&gt;非点对点时，经过路由器送到  &lt;/li&gt;
&lt;li&gt;Ip层可以是配置为路由或者主机前者非则转发，后者非则丢弃&lt;/li&gt;
&lt;li&gt;路由表项：每一项为
    
    </summary>
    
      <category term="tcpip" scheme="https://xdksx.github.io/categories/tcpip/"/>
    
    
      <category term="tcpip_ip" scheme="https://xdksx.github.io/tags/tcpip-ip/"/>
    
  </entry>
  
  <entry>
    <title>cpp_conanddest_semantics</title>
    <link href="https://xdksx.github.io/2018/06/09/cpp-conanddest-semantics/"/>
    <id>https://xdksx.github.io/2018/06/09/cpp-conanddest-semantics/</id>
    <published>2018-06-09T14:03:32.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;构造和析构函数语义学&quot;&gt;&lt;a href=&quot;#构造和析构函数语义学&quot; class=&quot;headerlink&quot; title=&quot;构造和析构函数语义学&quot;&gt;&lt;/a&gt;构造和析构函数语义学&lt;/h3&gt;&lt;h4 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1.&quot;&gt;&lt;/a&gt;1.&lt;/h4&gt;&lt;p&gt;即使是abstract base class也可能需要手动写constructor,de…,关键是看它有没有non satic data member
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_class" scheme="https://xdksx.github.io/tags/cpp-class/"/>
    
  </entry>
  
  <entry>
    <title>cpp_funcmember_memory</title>
    <link href="https://xdksx.github.io/2018/06/09/cpp-funcmember-memory/"/>
    <id>https://xdksx.github.io/2018/06/09/cpp-funcmember-memory/</id>
    <published>2018-06-09T08:21:29.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-function语意学&quot;&gt;&lt;a href=&quot;#c-function语意学&quot; class=&quot;headerlink&quot; title=&quot;c++ function语意学&quot;&gt;&lt;/a&gt;c++ function语意学&lt;/h3&gt;&lt;p&gt;something:&lt;br&gt;恩，这部分记录自己对c++中的函数特殊性的理解，本想深入函数本质，之前接触过，记得在linux内核剖析那本书讲的很好。&lt;br&gt; 可以参考；
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_class" scheme="https://xdksx.github.io/tags/cpp-class/"/>
    
  </entry>
  
  <entry>
    <title>cpp_datamember_memory</title>
    <link href="https://xdksx.github.io/2018/06/08/cpp-datamember-memory/"/>
    <id>https://xdksx.github.io/2018/06/08/cpp-datamember-memory/</id>
    <published>2018-06-09T06:46:49.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-class-datamemory&quot;&gt;&lt;a href=&quot;#c-class-datamemory&quot; class=&quot;headerlink&quot; title=&quot;c++ class  datamemory&quot;&gt;&lt;/a&gt;c++ class  datamemory&lt;/h3&gt;&lt;p&gt;详细介绍c++的成员布局，类本身的布局和在各种情况下的布局&lt;/p&gt;
&lt;h4 id=&quot;“类”本身的大小：&quot;&gt;&lt;a href=&quot;#“类”本身的大小：&quot; class=&quot;headerlink&quot; title=&quot;“类”本身的大小：&quot;&gt;&lt;/a&gt;“类”本身的大小：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;the simplest 引入&lt;/li&gt;
&lt;li&gt;1.2 多少内存能表现一个class?&lt;br&gt;最小是１　  size
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_class" scheme="https://xdksx.github.io/tags/cpp-class/"/>
    
  </entry>
  
  <entry>
    <title>cpp_polymorphism</title>
    <link href="https://xdksx.github.io/2018/06/08/cpp-polymorphism/"/>
    <id>https://xdksx.github.io/2018/06/08/cpp-polymorphism/</id>
    <published>2018-06-09T06:06:57.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;多态：&quot;&gt;&lt;a href=&quot;#多态：&quot; class=&quot;headerlink&quot; title=&quot;多态：&quot;&gt;&lt;/a&gt;多态：&lt;/h3&gt;&lt;h4 id=&quot;为什么需要多态？&quot;&gt;&lt;a href=&quot;#为什么需要多态？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要多态？&quot;&gt;&lt;/a&gt;为什么需要多态？&lt;/h4&gt;&lt;p&gt;引入几个点：&lt;br&gt;　　继承的机制中，基类的指针和引用能指向派生类，（派生类对象中的基类成员是在内存前面的，即指向派生类对象的指针指向的是第一个基类的第一个成员）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指针的值本质上是内存地址，也就是说指向不同变量(int char.)，对象的指针本身的值都是地址的value)&lt;/li&gt;
&lt;li&gt;指针的类型限定了指针的操作内存范围和取值的方式，如通过int指针取值的时候，取到４byte,通过char指针取值时取得1byte;）
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_class" scheme="https://xdksx.github.io/tags/cpp-class/"/>
    
  </entry>
  
  <entry>
    <title>cpp_inheritance</title>
    <link href="https://xdksx.github.io/2018/06/08/cpp-inheritance/"/>
    <id>https://xdksx.github.io/2018/06/08/cpp-inheritance/</id>
    <published>2018-06-09T03:44:54.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-继承：&quot;&gt;&lt;a href=&quot;#c-继承：&quot; class=&quot;headerlink&quot; title=&quot;c++ 继承：&quot;&gt;&lt;/a&gt;c++ 继承：&lt;/h3&gt;&lt;h4 id=&quot;继承是什么能做什么&quot;&gt;&lt;a href=&quot;#继承是什么能做什么&quot; class=&quot;headerlink&quot; title=&quot;继承是什么能做什么&quot;&gt;&lt;/a&gt;继承是什么能做什么&lt;/h4&gt;&lt;p&gt;继承是创建复杂类的另一种方式，它展现出来俩个obj 的is-a的概念（前一种方式是加入复杂的函数和成员等has-a　概念）&lt;br&gt;继承体现的是两个对象（类）之间的联系，子类继承父类的成员和方法，然后特殊化于扩展自己的成员和方法，正如苹果和梨都是水果，它们拥有水果的一般特性，等边三角形是特殊的等腰三角形
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_class" scheme="https://xdksx.github.io/tags/cpp-class/"/>
    
  </entry>
  
</feed>
