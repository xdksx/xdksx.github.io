<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>追光者</title>
  
  <subtitle>小兴的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xdksx.github.io/"/>
  <updated>2020-04-05T04:11:51.962Z</updated>
  <id>https://xdksx.github.io/</id>
  
  <author>
    <name>小兴</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我理解的心理模型</title>
    <link href="https://xdksx.github.io/2020/04/03/%E6%88%91%E7%90%86%E8%A7%A3%E7%9A%84%E5%BF%83%E7%90%86%E6%A8%A1%E5%9E%8B/"/>
    <id>https://xdksx.github.io/2020/04/03/我理解的心理模型/</id>
    <published>2020-04-03T21:44:04.000Z</published>
    <updated>2020-04-05T04:11:51.962Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;以下内容均为本人构想理解提出，如有雷同纯属巧合，仅为本人粗略观点，不期赞同；&lt;/p&gt;
&lt;h3 id=&quot;一、模型概念&quot;&gt;&lt;a href=&quot;#一、模型概念&quot; class=&quot;headerlink&quot; title=&quot;一、模型概念&quot;&gt;&lt;/a&gt;一、模型概念&lt;/h3&gt;&lt;h4
        
      
    
    </summary>
    
      <category term="心理" scheme="https://xdksx.github.io/categories/%E5%BF%83%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>cpp_runtime_semantis</title>
    <link href="https://xdksx.github.io/2018/07/29/cpp-runtime-semantis/"/>
    <id>https://xdksx.github.io/2018/07/29/cpp-runtime-semantis/</id>
    <published>2018-07-29T09:54:07.000Z</published>
    <updated>2020-03-21T08:20:24.432Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-执行期语意学&quot;&gt;&lt;a href=&quot;#c-执行期语意学&quot; class=&quot;headerlink&quot; title=&quot;c++ 执行期语意学&quot;&gt;&lt;/a&gt;c++ 执行期语意学&lt;/h3&gt;&lt;h4 id=&quot;执行期和编译期的理解&quot;&gt;&lt;a href=&quot;#执行期和编译期的理解&quot; class=&quot;headerlink&quot; title=&quot;执行期和编译期的理解&quot;&gt;&lt;/a&gt;执行期和编译期的理解&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;执行期：此时是对已经编译等生成的可执行文件装载到内存并调用cpu将其作为一个进程执行的过程，对c.c++来说程序的入口为main,即第一条指令是执行main函数开始的，而c++可能会加入一些额外的代码，所以实际写的第一条语句和执行的第一条语句可能有偏差；
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_class" scheme="https://xdksx.github.io/tags/cpp-class/"/>
    
  </entry>
  
  <entry>
    <title>tcpip_pingtraceroute</title>
    <link href="https://xdksx.github.io/2018/06/24/tcpip-pingtraceroute/"/>
    <id>https://xdksx.github.io/2018/06/24/tcpip-pingtraceroute/</id>
    <published>2018-06-24T14:42:49.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ping-and-traceroute&quot;&gt;&lt;a href=&quot;#ping-and-traceroute&quot; class=&quot;headerlink&quot; title=&quot;ping and traceroute&quot;&gt;&lt;/a&gt;ping and traceroute&lt;/h3&gt;&lt;h4 id=&quot;ping&quot;&gt;&lt;a href=&quot;#ping&quot; class=&quot;headerlink&quot; title=&quot;ping&quot;&gt;&lt;/a&gt;ping&lt;/h4&gt;&lt;p&gt;ping是ICMP中的回显报文类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ping 对应的icmp，type字段为0/8,code字段为0&lt;/li&gt;
&lt;li&gt;ICMP回显请求和应答报文格式：
    
    </summary>
    
      <category term="tcpip" scheme="https://xdksx.github.io/categories/tcpip/"/>
    
    
      <category term="tcpip_ip" scheme="https://xdksx.github.io/tags/tcpip-ip/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_string</title>
    <link href="https://xdksx.github.io/2018/06/24/leetcode-string/"/>
    <id>https://xdksx.github.io/2018/06/24/leetcode-string/</id>
    <published>2018-06-24T09:48:05.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;leetcode-string&quot;&gt;&lt;a href=&quot;#leetcode-string&quot; class=&quot;headerlink&quot; title=&quot;leetcode_string&quot;&gt;&lt;/a&gt;leetcode_string&lt;/h3&gt;&lt;h4 id=&quot;传统字符串匹配：&quot;&gt;&lt;a href=&quot;#传统字符串匹配：&quot; class=&quot;headerlink&quot; title=&quot;传统字符串匹配：&quot;&gt;&lt;/a&gt;传统字符串匹配：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;简单写写,变量命名等就先不纠结了&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;strStr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; s[],&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; p[])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;||p[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&quot;p or s is null&quot;&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;s[i]!=&lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;&amp;amp;&amp;amp;s[k]!=&lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p[j]==&lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				   &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;	 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s[k]==p[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 k++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//不匹配时重新来过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 k=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					 j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p[j]==&lt;span class=&quot;string&quot;&gt;&#39;\0&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;kmp匹配算法&quot;&gt;&lt;a href=&quot;#kmp匹配算法&quot; class=&quot;headerlink&quot; title=&quot;kmp匹配算法&quot;&gt;&lt;/a&gt;kmp匹配算法&lt;/h4&gt;&lt;p&gt;kmp算法：基本过程见另一篇文章数据结构之字符串
    
    </summary>
    
      <category term="leetcode" scheme="https://xdksx.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode_string" scheme="https://xdksx.github.io/tags/leetcode-string/"/>
    
  </entry>
  
  <entry>
    <title>DS_string</title>
    <link href="https://xdksx.github.io/2018/06/24/DS-string/"/>
    <id>https://xdksx.github.io/2018/06/24/DS-string/</id>
    <published>2018-06-24T08:01:32.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据结构之串&quot;&gt;&lt;a href=&quot;#数据结构之串&quot; class=&quot;headerlink&quot; title=&quot;数据结构之串&quot;&gt;&lt;/a&gt;数据结构之串&lt;/h3&gt;&lt;p&gt;欢迎来到简单而又复杂的串世界,博主许久没有去研究串，还停留在以前学习和使用串的水平，再来一波学习和归纳，发现串的基本用法其实简单，也好理解，但是衍生出来的和应用相关，而且复杂，下面道来；
    
    </summary>
    
      <category term="数据结构和算法" scheme="https://xdksx.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="https://xdksx.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>tcpip_routeicmp</title>
    <link href="https://xdksx.github.io/2018/06/10/tcpip-routeicmp/"/>
    <id>https://xdksx.github.io/2018/06/10/tcpip-routeicmp/</id>
    <published>2018-06-10T08:59:04.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;IP选路和ICMP协议&quot;&gt;&lt;a href=&quot;#IP选路和ICMP协议&quot; class=&quot;headerlink&quot; title=&quot;IP选路和ICMP协议&quot;&gt;&lt;/a&gt;IP选路和ICMP协议&lt;/h3&gt;&lt;h4 id=&quot;IP如何选路概述：&quot;&gt;&lt;a href=&quot;#IP如何选路概述：&quot; class=&quot;headerlink&quot; title=&quot;IP如何选路概述：&quot;&gt;&lt;/a&gt;IP如何选路概述：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ip选路实际上是一种选路机制，它搜索路由表并决定向哪个网络接口发送分组，区别于选路策略，后者是一组决定把哪些路由放入路由表的规则；ip执行选路机制，而路由守护程序则一般提供选路策略如rip,ospf&lt;/li&gt;
&lt;li&gt;点对点时，直接送到  &lt;/li&gt;
&lt;li&gt;非点对点时，经过路由器送到  &lt;/li&gt;
&lt;li&gt;Ip层可以是配置为路由或者主机前者非则转发，后者非则丢弃&lt;/li&gt;
&lt;li&gt;路由表项：每一项为
    
    </summary>
    
      <category term="tcpip" scheme="https://xdksx.github.io/categories/tcpip/"/>
    
    
      <category term="tcpip_ip" scheme="https://xdksx.github.io/tags/tcpip-ip/"/>
    
  </entry>
  
  <entry>
    <title>cpp_conanddest_semantics</title>
    <link href="https://xdksx.github.io/2018/06/09/cpp-conanddest-semantics/"/>
    <id>https://xdksx.github.io/2018/06/09/cpp-conanddest-semantics/</id>
    <published>2018-06-09T14:03:32.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;构造和析构函数语义学&quot;&gt;&lt;a href=&quot;#构造和析构函数语义学&quot; class=&quot;headerlink&quot; title=&quot;构造和析构函数语义学&quot;&gt;&lt;/a&gt;构造和析构函数语义学&lt;/h3&gt;&lt;h4 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1.&quot;&gt;&lt;/a&gt;1.&lt;/h4&gt;&lt;p&gt;即使是abstract base class也可能需要手动写constructor,de…,关键是看它有没有non satic data member
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_class" scheme="https://xdksx.github.io/tags/cpp-class/"/>
    
  </entry>
  
  <entry>
    <title>cpp_funcmember_memory</title>
    <link href="https://xdksx.github.io/2018/06/09/cpp-funcmember-memory/"/>
    <id>https://xdksx.github.io/2018/06/09/cpp-funcmember-memory/</id>
    <published>2018-06-09T08:21:29.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-function语意学&quot;&gt;&lt;a href=&quot;#c-function语意学&quot; class=&quot;headerlink&quot; title=&quot;c++ function语意学&quot;&gt;&lt;/a&gt;c++ function语意学&lt;/h3&gt;&lt;p&gt;something:&lt;br&gt;恩，这部分记录自己对c++中的函数特殊性的理解，本想深入函数本质，之前接触过，记得在linux内核剖析那本书讲的很好。&lt;br&gt; 可以参考；
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_class" scheme="https://xdksx.github.io/tags/cpp-class/"/>
    
  </entry>
  
  <entry>
    <title>cpp_datamember_memory</title>
    <link href="https://xdksx.github.io/2018/06/08/cpp-datamember-memory/"/>
    <id>https://xdksx.github.io/2018/06/08/cpp-datamember-memory/</id>
    <published>2018-06-09T06:46:49.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-class-datamemory&quot;&gt;&lt;a href=&quot;#c-class-datamemory&quot; class=&quot;headerlink&quot; title=&quot;c++ class  datamemory&quot;&gt;&lt;/a&gt;c++ class  datamemory&lt;/h3&gt;&lt;p&gt;详细介绍c++的成员布局，类本身的布局和在各种情况下的布局&lt;/p&gt;
&lt;h4 id=&quot;“类”本身的大小：&quot;&gt;&lt;a href=&quot;#“类”本身的大小：&quot; class=&quot;headerlink&quot; title=&quot;“类”本身的大小：&quot;&gt;&lt;/a&gt;“类”本身的大小：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;the simplest 引入&lt;/li&gt;
&lt;li&gt;1.2 多少内存能表现一个class?&lt;br&gt;最小是１　  size
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_class" scheme="https://xdksx.github.io/tags/cpp-class/"/>
    
  </entry>
  
  <entry>
    <title>cpp_polymorphism</title>
    <link href="https://xdksx.github.io/2018/06/08/cpp-polymorphism/"/>
    <id>https://xdksx.github.io/2018/06/08/cpp-polymorphism/</id>
    <published>2018-06-09T06:06:57.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;多态：&quot;&gt;&lt;a href=&quot;#多态：&quot; class=&quot;headerlink&quot; title=&quot;多态：&quot;&gt;&lt;/a&gt;多态：&lt;/h3&gt;&lt;h4 id=&quot;为什么需要多态？&quot;&gt;&lt;a href=&quot;#为什么需要多态？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要多态？&quot;&gt;&lt;/a&gt;为什么需要多态？&lt;/h4&gt;&lt;p&gt;引入几个点：&lt;br&gt;　　继承的机制中，基类的指针和引用能指向派生类，（派生类对象中的基类成员是在内存前面的，即指向派生类对象的指针指向的是第一个基类的第一个成员）  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指针的值本质上是内存地址，也就是说指向不同变量(int char.)，对象的指针本身的值都是地址的value)&lt;/li&gt;
&lt;li&gt;指针的类型限定了指针的操作内存范围和取值的方式，如通过int指针取值的时候，取到４byte,通过char指针取值时取得1byte;）
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_class" scheme="https://xdksx.github.io/tags/cpp-class/"/>
    
  </entry>
  
  <entry>
    <title>cpp_inheritance</title>
    <link href="https://xdksx.github.io/2018/06/08/cpp-inheritance/"/>
    <id>https://xdksx.github.io/2018/06/08/cpp-inheritance/</id>
    <published>2018-06-09T03:44:54.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-继承：&quot;&gt;&lt;a href=&quot;#c-继承：&quot; class=&quot;headerlink&quot; title=&quot;c++ 继承：&quot;&gt;&lt;/a&gt;c++ 继承：&lt;/h3&gt;&lt;h4 id=&quot;继承是什么能做什么&quot;&gt;&lt;a href=&quot;#继承是什么能做什么&quot; class=&quot;headerlink&quot; title=&quot;继承是什么能做什么&quot;&gt;&lt;/a&gt;继承是什么能做什么&lt;/h4&gt;&lt;p&gt;继承是创建复杂类的另一种方式，它展现出来俩个obj 的is-a的概念（前一种方式是加入复杂的函数和成员等has-a　概念）&lt;br&gt;继承体现的是两个对象（类）之间的联系，子类继承父类的成员和方法，然后特殊化于扩展自己的成员和方法，正如苹果和梨都是水果，它们拥有水果的一般特性，等边三角形是特殊的等腰三角形
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_class" scheme="https://xdksx.github.io/tags/cpp-class/"/>
    
  </entry>
  
  <entry>
    <title>cpp_conandde</title>
    <link href="https://xdksx.github.io/2018/06/08/cpp-conandde/"/>
    <id>https://xdksx.github.io/2018/06/08/cpp-conandde/</id>
    <published>2018-06-09T03:03:35.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;c-class-constructor-and-destructor&quot;&gt;&lt;a href=&quot;#c-class-constructor-and-destructor&quot; class=&quot;headerlink&quot; title=&quot;c++ class constructor and destructor&quot;&gt;&lt;/a&gt;c++ class constructor and destructor&lt;/h2&gt;&lt;h3 id=&quot;构造函数&quot;&gt;&lt;a href=&quot;#构造函数&quot; class=&quot;headerlink&quot; title=&quot;构造函数&quot;&gt;&lt;/a&gt;构造函数&lt;/h3&gt;&lt;h4 id=&quot;构造函数表现&quot;&gt;&lt;a href=&quot;#构造函数表现&quot; class=&quot;headerlink&quot; title=&quot;构造函数表现&quot;&gt;&lt;/a&gt;构造函数表现&lt;/h4&gt;&lt;h5 id=&quot;构造函数的作用：&quot;&gt;&lt;a href=&quot;#构造函数的作用：&quot; class=&quot;headerlink&quot; title=&quot;构造函数的作用：&quot;&gt;&lt;/a&gt;构造函数的作用：&lt;/h5&gt;&lt;p&gt;构造函数主要是用来初始化对象的－－－一般是成员，函数不用&lt;br&gt;–所以它需要在构建对象时就执行
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_class" scheme="https://xdksx.github.io/tags/cpp-class/"/>
    
  </entry>
  
  <entry>
    <title>cpp_class_memory</title>
    <link href="https://xdksx.github.io/2018/06/08/cpp-class-memory/"/>
    <id>https://xdksx.github.io/2018/06/08/cpp-class-memory/</id>
    <published>2018-06-09T02:44:41.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-类内存布局：&quot;&gt;&lt;a href=&quot;#c-类内存布局：&quot; class=&quot;headerlink&quot; title=&quot;c++类内存布局：&quot;&gt;&lt;/a&gt;c++类内存布局：&lt;/h3&gt;&lt;h4 id=&quot;静态&quot;&gt;&lt;a href=&quot;#静态&quot; class=&quot;headerlink&quot; title=&quot;静态&quot;&gt;&lt;/a&gt;静态&lt;/h4&gt;&lt;p&gt;下编译后的“内存布局”，此时还未分配内存，不能算是内存，只能说是文件布局
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_memory" scheme="https://xdksx.github.io/tags/cpp-memory/"/>
    
  </entry>
  
  <entry>
    <title>cpp_this</title>
    <link href="https://xdksx.github.io/2018/06/08/cpp-this/"/>
    <id>https://xdksx.github.io/2018/06/08/cpp-this/</id>
    <published>2018-06-09T02:13:46.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-关键字之this&quot;&gt;&lt;a href=&quot;#c-关键字之this&quot; class=&quot;headerlink&quot; title=&quot;c++关键字之this&quot;&gt;&lt;/a&gt;c++关键字之this&lt;/h3&gt;&lt;h4 id=&quot;this指针是什么&quot;&gt;&lt;a href=&quot;#this指针是什么&quot; class=&quot;headerlink&quot; title=&quot;this指针是什么&quot;&gt;&lt;/a&gt;this指针是什么&lt;/h4&gt;&lt;p&gt;this是一个指向当前正在使用的对象的指针，它是一个指针；&lt;br&gt;成员函数通过它来使用对象的值，通过它知道要对哪个对象的成员操作&lt;br&gt;如：
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_keyword" scheme="https://xdksx.github.io/tags/cpp-keyword/"/>
    
  </entry>
  
  <entry>
    <title>cpp_static</title>
    <link href="https://xdksx.github.io/2018/06/08/cpp-static/"/>
    <id>https://xdksx.github.io/2018/06/08/cpp-static/</id>
    <published>2018-06-08T14:44:43.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-关键词之static&quot;&gt;&lt;a href=&quot;#c-关键词之static&quot; class=&quot;headerlink&quot; title=&quot;c++关键词之static&quot;&gt;&lt;/a&gt;c++关键词之static&lt;/h3&gt;&lt;h5 id=&quot;something-share&quot;&gt;&lt;a href=&quot;#something-share&quot; class=&quot;headerlink&quot; title=&quot;something share:&quot;&gt;&lt;/a&gt;something share:&lt;/h5&gt;&lt;p&gt;其实，一开始学习c++的时候，并没有想去了解它的语法原理。虽然学c的时候，附带学了汇编，也学到了内存段，和学编译原理的时候顺带了解了它的相关词法语法处理。　　&lt;br&gt;现在开始从原因，历史，内存，汇编等角度去看cpp，觉得清晰了一些。虽然没有去学习g++或者其他编译器
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_keyword" scheme="https://xdksx.github.io/tags/cpp-keyword/"/>
    
  </entry>
  
  <entry>
    <title>cpp_const</title>
    <link href="https://xdksx.github.io/2018/06/08/cpp-const/"/>
    <id>https://xdksx.github.io/2018/06/08/cpp-const/</id>
    <published>2018-06-08T14:07:46.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-关键词之const&quot;&gt;&lt;a href=&quot;#c-关键词之const&quot; class=&quot;headerlink&quot; title=&quot;c++关键词之const&quot;&gt;&lt;/a&gt;c++关键词之const&lt;/h3&gt;&lt;h4 id=&quot;const介绍，用法，原理，注意点等&quot;&gt;&lt;a href=&quot;#const介绍，用法，原理，注意点等&quot; class=&quot;headerlink&quot; title=&quot;const介绍，用法，原理，注意点等&quot;&gt;&lt;/a&gt;const介绍，用法，原理，注意点等&lt;/h4&gt;&lt;h5 id=&quot;const-介绍：&quot;&gt;&lt;a href=&quot;#const-介绍：&quot; class=&quot;headerlink&quot; title=&quot;const 介绍：&quot;&gt;&lt;/a&gt;const 介绍：&lt;/h5&gt;&lt;p&gt;const是用于标示不可修改的变量，对象或函数的。&lt;br&gt;在其前面添加const就无法在之后做修改  &lt;/p&gt;
&lt;h5 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法 &quot;&gt;&lt;/a&gt;用法
    
    </summary>
    
      <category term="c&amp;cpp" scheme="https://xdksx.github.io/categories/c-cpp/"/>
    
    
      <category term="cpp_keyword" scheme="https://xdksx.github.io/tags/cpp-keyword/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_linklist3</title>
    <link href="https://xdksx.github.io/2018/06/07/leetcode-linklist3/"/>
    <id>https://xdksx.github.io/2018/06/07/leetcode-linklist3/</id>
    <published>2018-06-07T15:33:03.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;leetcode-linklist3&quot;&gt;&lt;a href=&quot;#leetcode-linklist3&quot; class=&quot;headerlink&quot; title=&quot;leetcode_linklist3&quot;&gt;&lt;/a&gt;leetcode_linklist3&lt;/h3&gt;&lt;p&gt;continue..&lt;/p&gt;
&lt;h4 id=&quot;反转链表&quot;&gt;&lt;a href=&quot;#反转链表&quot; class=&quot;headerlink&quot; title=&quot;反转链表&quot;&gt;&lt;/a&gt;反转链表&lt;/h4&gt;&lt;p&gt;Given a linked list, rotate the list to the right by k places, where k is non-negative.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://xdksx.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode_linklist" scheme="https://xdksx.github.io/tags/leetcode-linklist/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_linklist2</title>
    <link href="https://xdksx.github.io/2018/06/03/leetcode-linklist2/"/>
    <id>https://xdksx.github.io/2018/06/03/leetcode-linklist2/</id>
    <published>2018-06-03T13:40:41.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;leetcode——单链表2&quot;&gt;&lt;a href=&quot;#leetcode——单链表2&quot; class=&quot;headerlink&quot; title=&quot;leetcode——单链表2&quot;&gt;&lt;/a&gt;leetcode——单链表2&lt;/h3&gt;&lt;h4 id=&quot;partition-list&quot;&gt;&lt;a href=&quot;#partition-list&quot; class=&quot;headerlink&quot; title=&quot;partition list&quot;&gt;&lt;/a&gt;partition list&lt;/h4&gt;&lt;p&gt;这个是快速排序中一个很重要的步骤，即比该数大于等于的放其前小的放后。在链表中，基本思路:扫描链表，比给定数字小的不处理，比给定数字大的取下并插入到末尾
    
    </summary>
    
      <category term="leetcode" scheme="https://xdksx.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode_linklist" scheme="https://xdksx.github.io/tags/leetcode-linklist/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_linklist1</title>
    <link href="https://xdksx.github.io/2018/06/03/leetcode-linklist1/"/>
    <id>https://xdksx.github.io/2018/06/03/leetcode-linklist1/</id>
    <published>2018-06-03T13:37:57.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;leetcode——单链表&quot;&gt;&lt;a href=&quot;#leetcode——单链表&quot; class=&quot;headerlink&quot; title=&quot;leetcode——单链表&quot;&gt;&lt;/a&gt;leetcode——单链表&lt;/h3&gt;&lt;h4 id=&quot;两数相加：&quot;&gt;&lt;a href=&quot;#两数相加：&quot; class=&quot;headerlink&quot; title=&quot;两数相加：&quot;&gt;&lt;/a&gt;两数相加：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;这道题是经一年多没刷题目之后，重新开始的第一道题，本来想着只是本地刷刷，后面开始就到leetcode提交了，毕竟写的程序还是得经过检验&lt;/li&gt;
&lt;li&gt;所以这道题就纯粹的解答，未经检验，只是本地跑通，并且加上了自己的一些看法，比如对该题目该思路可能可以应用在哪些地方，这样算法才有了真正的意义，个人十分不赞同一些在公司呆久了的人说数据结构算法没什么用的人2333&lt;/li&gt;
&lt;li&gt;废话不多说：  好久没写，第一道就别吐槽了，慢慢来&lt;/li&gt;
&lt;li&gt;题目描述：
    
    </summary>
    
      <category term="leetcode" scheme="https://xdksx.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode_linklist" scheme="https://xdksx.github.io/tags/leetcode-linklist/"/>
    
  </entry>
  
  <entry>
    <title>tcpip_IP</title>
    <link href="https://xdksx.github.io/2018/06/03/tcpip-IP/"/>
    <id>https://xdksx.github.io/2018/06/03/tcpip-IP/</id>
    <published>2018-06-03T11:31:27.000Z</published>
    <updated>2020-03-21T07:30:55.165Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;IP-协议和路由&quot;&gt;&lt;a href=&quot;#IP-协议和路由&quot; class=&quot;headerlink&quot; title=&quot;IP 协议和路由&quot;&gt;&lt;/a&gt;IP 协议和路由&lt;/h3&gt;&lt;h4 id=&quot;IP的作用–路由&quot;&gt;&lt;a href=&quot;#IP的作用–路由&quot; class=&quot;headerlink&quot; title=&quot;IP的作用–路由&quot;&gt;&lt;/a&gt;IP的作用–路由&lt;/h4&gt;&lt;h5 id=&quot;路由是什么-一个数据包如何在网络上传输-会对ip包做什么动作&quot;&gt;&lt;a href=&quot;#路由是什么-一个数据包如何在网络上传输-会对ip包做什么动作&quot; class=&quot;headerlink&quot; title=&quot;路由是什么?一个数据包如何在网络上传输?会对ip包做什么动作?&quot;&gt;&lt;/a&gt;路由是什么?一个数据包如何在网络上传输?会对ip包做什么动作?&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从广义上讲，路由是路线图，就像百度地图上源地址到目的地址的路线，路线有很多，故路由也很多；
    
    </summary>
    
      <category term="tcpip" scheme="https://xdksx.github.io/categories/tcpip/"/>
    
    
      <category term="tcpip_ip" scheme="https://xdksx.github.io/tags/tcpip-ip/"/>
    
  </entry>
  
</feed>
